import { defineConfig } from 'vite';
import { resolve } from 'path';
{{#if (eq frameworkType "react")}}
import react from '@vitejs/plugin-react';
{{/if}}
{{#if (eq frameworkType "vue")}}
import vue from '@vitejs/plugin-vue';
{{/if}}
{{#if (eq frameworkType "svelte")}}
import { svelte } from '@sveltejs/vite-plugin-svelte';
{{/if}}
{{#if (eq frameworkType "preact")}}
import preact from '@preact/preset-vite';
{{/if}}

// Multi-page app configuration
const pages = {
  main: resolve(__dirname, 'index.html'),
  {{#each additionalPages}}
  {{this.name}}: resolve(__dirname, '{{this.path}}'),
  {{/each}}
};

export default defineConfig({
  plugins: [
    {{#if (eq frameworkType "react")}}
    react(),
    {{/if}}
    {{#if (eq frameworkType "vue")}}
    vue(),
    {{/if}}
    {{#if (eq frameworkType "svelte")}}
    svelte(),
    {{/if}}
    {{#if (eq frameworkType "preact")}}
    preact(),
    {{/if}}
  ],
  
  // Multi-page app configuration
  build: {
    rollupOptions: {
      input: pages,
      output: {
        // Organize chunks
        chunkFileNames: 'assets/js/[name]-[hash].js',
        entryFileNames: 'assets/js/[name]-[hash].js',
        assetFileNames: ({ name }) => {
          if (/\.(gif|jpe?g|png|svg)$/.test(name ?? '')) {
            return 'assets/images/[name]-[hash][extname]';
          }
          if (/\.css$/.test(name ?? '')) {
            return 'assets/css/[name]-[hash][extname]';
          }
          return 'assets/[name]-[hash][extname]';
        },
        // Manual chunk splitting for better caching
        manualChunks: {
          {{#if (eq frameworkType "react")}}
          'react-vendor': ['react', 'react-dom'],
          {{/if}}
          {{#if (eq frameworkType "vue")}}
          'vue-vendor': ['vue'],
          {{/if}}
          {{#if (eq frameworkType "svelte")}}
          'svelte-vendor': ['svelte'],
          {{/if}}
          {{#if useChartLibrary}}
          'charts': ['chart.js'],
          {{/if}}
          {{#if useDataTables}}
          'tables': ['ag-grid-community'],
          {{/if}}
        },
      },
    },
    // Build optimizations
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true,
      },
    },
    // Generate source maps for production debugging
    sourcemap: true,
    // Target modern browsers
    target: 'es2020',
    // Asset size warnings
    chunkSizeWarningLimit: 1000,
  },
  
  // Development server configuration
  server: {
    port: {{devServerPort}},
    host: true,
    open: true,
    // Proxy API requests to Cloudflare Worker in development
    proxy: {
      '/api': {
        target: '{{#if workerDevUrl}}{{workerDevUrl}}{{else}}http://localhost:8787{{/if}}',
        changeOrigin: true,
        secure: false,
        rewrite: (path) => path,
      },
      {{#if enableWebsockets}}
      '/ws': {
        target: 'ws://localhost:8787',
        ws: true,
        changeOrigin: true,
      },
      {{/if}}
    },
    // HMR configuration
    hmr: {
      overlay: true,
    },
  },
  
  // Preview server (for testing production builds locally)
  preview: {
    port: {{previewPort}},
    host: true,
    open: true,
  },
  
  // Path resolution
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@components': resolve(__dirname, './src/components'),
      '@utils': resolve(__dirname, './src/utils'),
      '@services': resolve(__dirname, './src/services'),
      '@styles': resolve(__dirname, './src/styles'),
      {{#if (eq frameworkType "vanilla")}}
      '@js': resolve(__dirname, './src/js'),
      {{/if}}
      {{#each customAliases}}
      '{{this.alias}}': resolve(__dirname, '{{this.path}}'),
      {{/each}}
    },
    // Ensure .js extensions work for TypeScript files in development
    extensions: ['.mjs', '.js', '.ts', '.jsx', '.tsx', '.json', '.vue', '.svelte'],
  },
  
  // CSS configuration
  css: {
    preprocessorOptions: {
      {{#if useSass}}
      scss: {
        additionalData: `@import "@styles/variables.scss";`,
      },
      {{/if}}
      {{#if useLess}}
      less: {
        javascriptEnabled: true,
        additionalData: `@import "@styles/variables.less";`,
      },
      {{/if}}
    },
    // CSS modules configuration
    modules: {
      localsConvention: 'camelCase',
      generateScopedName: '[name]__[local]___[hash:base64:5]',
    },
  },
  
  // Environment variable handling
  define: {
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version),
    __BUILD_TIME__: JSON.stringify(new Date().toISOString()),
    {{#if enableFeatureFlags}}
    __FEATURE_FLAGS__: JSON.stringify({
      {{#each featureFlags}}
      {{this.name}}: {{this.enabled}},
      {{/each}}
    }),
    {{/if}}
  },
  
  // Optimization configuration
  optimizeDeps: {
    include: [
      {{#if (eq frameworkType "react")}}
      'react',
      'react-dom',
      {{/if}}
      {{#if (eq frameworkType "vue")}}
      'vue',
      {{/if}}
      {{#if useAxios}}
      'axios',
      {{/if}}
      {{#each optimizeDepsInclude}}
      '{{this}}',
      {{/each}}
    ],
    exclude: [
      {{#each optimizeDepsExclude}}
      '{{this}}',
      {{/each}}
    ],
  },
  
  // Worker configuration
  worker: {
    format: 'es',
  },
  
  // Build-specific configuration
  esbuild: {
    // Remove debugger statements in production
    drop: ['console', 'debugger'],
    // Maintain JSX for React 17+
    {{#if (eq frameworkType "react")}}
    jsxFactory: 'React.createElement',
    jsxFragment: 'React.Fragment',
    {{/if}}
  },
  
  {{#if enablePWA}}
  // PWA configuration
  pwa: {
    registerType: 'autoUpdate',
    includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
    manifest: {
      name: '{{projectName}}',
      short_name: '{{projectName}}',
      description: '{{projectDescription}}',
      theme_color: '{{themeColor}}',
      icons: [
        {
          src: 'pwa-192x192.png',
          sizes: '192x192',
          type: 'image/png',
        },
        {
          src: 'pwa-512x512.png',
          sizes: '512x512',
          type: 'image/png',
        },
      ],
    },
  },
  {{/if}}
  
  {{#if enableTests}}
  // Test configuration
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./src/tests/setup.js'],
    coverage: {
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'src/tests/',
      ],
    },
  },
  {{/if}}
});